'\" -*- coding: us-ascii -*-
.if \n(.g .ds T< \\FC
.if \n(.g .ds T> \\F[\n[.fam]]
.de URL
\\$2 \(la\\$1\(ra\\$3
..
.if \n(.g .mso www.tmac
.TH ulogd 8 "1 February 2016" "" ""
.SH NAME
ulogd \- the Netfilter Userspace Logging Daemon 
.SH SYNOPSIS
'nh
.fi
.ad l
\fBulogd\fR \kx
.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
'in \n(.iu+\nxu
[
\fB-h / --help\fR
] [
\fB-V / --version\fR
] [
\fB-d / --daemon\fR
] [
\fB-c / --configfile\fR
\fIfilename\fR
] [
\fB-i / --info\fR
\fIfilename\fR
]
'in \n(.iu-\nxu
.ad b
'hy
.SH OPTIONS
For a full summary of options, run \fBulogd --help\fR.
.TP 
\*(T<\fB\-h / \-\-help\fR\*(T>
Print a help message about the commandline options.
.TP 
\*(T<\fB\-V / \-\-version\fR\*(T>
Print version information about ulogd.
.TP 
\*(T<\fB\-d / \-\-daemon\fR\*(T>
For off into daemon mode. Unless you are debugging, you will want
to use this most of the time.
.TP 
\*(T<\fB\-c / \-\-configfile\fR\*(T>
Using this commandline option, an alternate config file can be used.
This is important if multiple instances of ulogd are to be run on a
single machine.
.TP 
\*(T<\fB\-i / \-\-info\fR\*(T>
Display informations about the plugin whom filename is given as
argument.
.SH ABSTRACT
This is the documentation for \fIulogd-2.x\fR, the second
generation Netfilter Userspace logging daemon. ulogd makes use of the
Linux >= 2.6.14 nfnetlink_log and nfnetlink_conntrack subsystems, but
also provides backwards compatibility for Linux >= 2.4.0 ipt_ULOG.
.SH "DESIGN CONCEPT"
ulogd-2.x wants to provide a flexible, almost universal logging daemon for
netfilter logging. This encompasses both packet-based logging (logging of
policy violations) and flow-based logging, e.g. for accounting purpose.
.PP
ulogd consists of a small core and a number of plugins. All the real
power lies in the plugins, and in the user who configures the interactions
between those plugins.
.PP
By means of the configuration file, the administrator can build any number
of Plugin Stacks. A plugin stack is a series of plugins, starting with an
Input plugin, none, one or multiple filter plugins, and one output plugin
on top.
.SS "INPUT PLUGINS"
Input plugins acts data source. They get data from somewhere outside of
ulogd, and convert it into a list of ulogd keys.
.SS "FILTER PLUGINS"
Filter plugins interpret and/or filter data that was received from the
Input Plugin. A good example is parsing a raw packet into IPv4 / TCP /
\&... header information.
.SS "OUTPUT PLUGINS"
Output plugins describe how and where to put the information gained by
the Input Plugin and processed by one or more Filter Plugins. The
easiest way is to build a line per packet and fprint it to a file. Some
people might want to log into a SQL database or want an output
conforming to the IETF IPFIX language.
.SH DETAILS
The major clue is providing a framework which is as flexible as possible.
Nobody knows what strange network protocols are out there :) But at the
same time, logging of a packet filter is often very performance critical.
Like all ulogd releases since 0.3.x, the ulogd-2.x core doesn't do any
dynamic allocations at runtime. Yes, obviously, at startup time the
config file is parsed, and allocations are made. But after that,
everything is pre-allocated. As an additional improvement over ulogd-1.x,
there are also no hashtable lookups for key resolval. All input/output
keys of plugins within every stack are resolved at config file parsing
time, and directly interconnected by pointers.
.SH INSTALLATION
.SS "LINUX KERNEL"
To use the NFCT or NFLOG input plugin, you will need a 2.6.14 or later kernel.
For old-style ULOG logging, you need a kernel >= 2.4.18.
.SS "USERSPACE LIBRARIES"
If you plan to use NFCT and NFLOG input plugin, you will need to compile
libnfnetlink, libnetfilter_conntrack and libnetfilter_log libraries
which can be downloaded from 
.URL http://www.netfilter.org/projects/ulogd/index.html "The 	netfilter.org \(dqulogd\(dq project"
A simple './configure; make; make
install' will be enough to have library installed on your system.
.SS "RECOMPILING THE SOURCE"
Download the ulogd package and untar it.
.PP
If you want to build ulogd with MySQL support, type './configure
--with-mysql'. You may also have to specify the path of the mysql
libraries using '--with-mysql=path'. To build ulogd without MySQL
support, just use './configure'.
.PP
To compile and install the program, call 'make install'.
.SH "IPTABLES NFLOG TARGET"
.SS "QUICK SETUP"
Just add rules using the NFLOG target to your firewalling chain. A
very basic example:

.nf
\*(T<
	  iptables \-A FORWARD \-j NFLOG \-\-nflog\-group 32 \-\-nflog\-prefix foo
	\*(T>
.fi

To increase logging performance, try to use the

.nf
\*(T<
	  \-\-nflog\-qthreshold N
	\*(T>
.fi

option (where 1 < N <= 50). The number you specify is the amount
of packets batched together in one multipart netlink message. If you
set this to 20, the kernel schedules ulogd only once every 20
packets. All 20 packets are then processed by ulogd. This reduces the
number of context switches between kernel and userspace.
.PP
Of course you can combine the NFLOG target with the different
netfilter match modules. For a more detailed description, have a look
at the netfilter HOWTO's, available on the netfilter homepage.
.SS "NFLOG TARGET REFERENCE"
.TP 
\*(T<\fB\-\-nflog\-group N\fR\*(T>
The number of the netlink multicast group to which NFLOG'ed
packets are sent. You will have to use the same group number in
the NFLOG target and ulogd in order to make logging work.
.TP 
\*(T<\fB\-\-nflog\-range N\fR\*(T>
Copyrange. This works like the 'snaplen' parameter of tcpdump.
You can specify a number of bytes up to which the packet is
copied. If you say '40', you will receive the first fourty
bytes of every packet. Leave it to \fI0\fR to
dump the whole packet.
.TP 
\*(T<\fB\-\-nflog\-threshold N\fR\*(T>
Queue threshold. If a packet is matched by the iptables rule,
and already N packets are in the queue, the queue is flushed to
userspace. You can use this to implement a policy like: Use a
big queue in order to gain high performance, but still have
certain packets logged immediately to userspace.
.TP 
\*(T<\fB\-\-nflog\-prefix STRING\fR\*(T>
A string that is associated with every packet logged by this rule.
You can use this option to later tell from which rule the packet
was logged.
.SH "CONFIGFILE SYNTAX REFERENCE"
ulogd is what this is all about, so let's describe it's configuration...
All configurable parameters of ulogd are in the configfile, typically
located at '/etc/ulogd.conf'. The following configuration parameters are
available:
.TP 
logfile
The main logfile, where ulogd reports any errors, warnings and
other unexpected conditions. Apart from a regular filename, the
following special values can be used; ``syslog'' to log via the
unix syslog(3) mechanism. ``stdout'' to log to stdout.
.TP 
loglevel
This specifies, how verbose the logging to logfile is. Currently
defined loglevels are: 1=debug information, 3=informational
messages, 5=noticable exceptional conditions, 7=error conditions,
8=fatal errors, program abort.
.TP 
plugin
This option is followed by a filename of a ulogd plugin, which ulogd
should load upon initialization. This option may appear more than
once.
.TP 
stack
This option is followed by a filename of a ulogd plugin, which ulogd
should load upon initialization. This option may appear more than
once.
.SH "SIGNALS / LOGROTATE"
ulogd understands two kinds of signals:
.TP 
SIGHUP
Close and re-open all logfiles. This is mainly intended for
logrotate scripts. Also closes and re-opens database connections.
.TP 
SIGUSR1
Reload configuration file. This is not fully implemented yet.
.TP 
SIGUSR2
Dump the whole conntrack table and flush counters afterwards. Only
Plugin ulogd_inpflow_NFCT.so uses this signal.
.SH "AVAILABLE PLUGINS"
It is important to understand that ulogd without plugins does nothing. It
will receive packets, and do nothing with them.
.PP
There are two kinds of plugins, interpreter and output plugins.
Interpreter plugins parse the packet, output plugins write the interpreted
information to some logfile/database/...
.PP
You can get information about plugins by running

.nf
\*(T<
	ulogd \-i path/to/plugin/file.so
      \*(T>
.fi
.SS "INPUT PLUGINS"
ulogd comes with the following input plugins:
.TP 
ulogd_inppkt_NFLOG.so
This interfaces the new nfnetlink_log interface. To compile,
you need libnetfilter_log installed in your system.
.RS 
.TP 
group
The number of the netlink multicast group to which
NFLOG'ed packets are sent. You will have to use the same
group number in the NFLOG target (-\e-nflog-group) and in
the input plugin.
.TP 
addressfamily
You will need to specify the value of the protocol if you
are not loging IPv4 packet. addressfamily is 7 to bridged
packet and 10 for IPv6 packet.
.TP 
numeric_label
You can use this label to store information relative to
the logging. The administrator can define a convention
which can be used later to differenciate packet. For
example, it can store the severity of the logged event.
.TP 
netlink_socket_buffer_size
Specify the base socket buffer size. This start value will
be increased if needed up to
netlink_socket_buffer_maxsize.
.TP 
netlink_socket_buffer_maxsize
Specify the base socket buffer maximum size.
.RE
.TP 
ulogd_inpflow_NFCT.so
This interfaces the nfnetlink_conntrack kernel subsystem, and
provides flow-based logging. To compile, you need
libnetfilter_conntrack installed on your system.
.RS 
.TP 
pollinterval
Change connection tracking dump interval.
.TP 
hash_enable
If set to 1 (default) a internal hash will be stored and
only destroy event will reach the output plugin. It set
to 0, all events are reveived by the output plugin.
.TP 
hash_buckets
Size of the internal hash bucket.
.TP 
hash_max_entries
Maximum number of entries in the internal connection hash.
.TP 
event_mask
.TP 
netlink_socket_buffer_size
.TP 
netlink_socket_buffer_maxsize
.RE
.SS "INTERPRETER PLUGINS"
ulogd comes with the following interpreter plugins:
.TP 
ulogd_raw2packet_BASE.so
Basic interpreter plugin for nfmark, timestamp, mac address, ip
header, tcp header, udp header, icmp header, ah/esp header... Most
people will want to load this very important plugin.
.TP 
ulogd_filter_PWSNIFF.so
Example interpreter plugin to log plaintext passwords as used with
FTP and POP3. Don't blame me for writing this plugin! The
protocols are inherently insecure, and there are a lot of other
tools for sniffing passwords... it's just an example.
.TP 
ulogd_filter_IFINDEX.so
Filter plugin that provides translation from the numerical ifindex
(e.g. '1') to the network interface name (e.g. 'eth4').
.TP 
ulogd_filter_HWHDR.so
This plugin convert hardware header to string. In the case of
ethernet packet, it basically convert mac address to a string
represetation.
.TP 
ulogd_filter_IP2BIN.so
This plugin convert IP addresses to a binary form usable by
databases like MySQL.
.TP 
ulogd_filter_IP2HBIN.so
This plugin convert IP addresses to a binary form in host order
usable by databases like MySQL.
.TP 
ulogd_filter_IP2STR.so
This plugin convert IP addresses to string.
.TP 
ulogd_filter_PRINTFLOW.so
Convert the keys relative to a flow in a string readable by human.
.TP 
ulogd_filter_PRINTPKT.so
Convert the keys relative to a packet in a string readable by
human. This plugin has to be used to print packet in the format
similar to the LOG target format.
.TP 
ulogd_filter_MARK.so
When this plugin is put in a stack, only messages were the mark
(packet mark or connection mark) matches the given mark/mask will
be logged.
.RS 
.TP 
mark
Define the mark which will be used to check packet or flow.
.TP 
mask
Define the mask which will be used to check packet or flow.
.RE
.SS "OUTPUT PLUGINS"
ulogd comes with the following output plugins:
.TP 
ulogd_output_OPRINT.so
A very simple output module, dumping all packets in the format

.nf
\*(T<
		===>PACKET BOUNDARY
		key=value
		key=value
		...
		===>PACKET BOUNDARY
		...
	      \*(T>
.fi

to a file. The only useful application is debugging.

The module defines the following configuration directives:
.RS 
.TP 
dumpfile
The filename where it should log to. The default is
\fI/var/log/ulogd.pktlog\fR
.RE
.TP 
ulogd_output_LOGEMU.so
An output module which tries to emulate the old syslog-based LOG
targed as far as possible. Logging is done to a seperate textfile
instead of syslog, though.

The module defines the following configuration directives:
.RS 
.TP 
file
The filename where it should log to. The default is
\fI/var/log/ulogd.syslogemu\fR
.TP 
sync
Set this to 1 if you want to have your logfile written
synchronously. This may reduce performance, but makes your
log-lines appear immediately. The default is
\fI0\fR
.RE
.TP 
ulogd_output_MYSQL.so
An output plugin for logging into a mysql database. This is only
compiled if you have the mysql libraries installed, and the
configure script was able to detect them. (that is: --with-mysql
was specified for ./configure)

The plugin automagically runs a procedure with arguments taken
from a the configurable table; It connects to mysql during the
startup phase of ulogd and obtains a list of the columns in the
table. Then it tries to resolve the column names against keys of
interpreter plugins. This way you can easily select which
information you want to log - just by the layout of the table.

If, for example, your table contains a field called 'ip_saddr', ulogd will
resolve this against the key 'ip.saddr' and put the ip address as 32bit
unsigned integer into the corresponding argument of table.

The file '\fIdoc/mysql-ulogd2.sql\fR' contains a
schema for both packet and flow logging.

The module defines the following configuration directives:
.RS 
.TP 
table
Name of the table which ulogd will use to build arguments
list.
.TP 
procedure
Stored procedure that will be run with the argument
specified in the table variable. Behaviour of the
procedure option can be twitted by using specific name.
If procedure name is:
.RS 
.TP 0.2i
\(bu
"INSERT": A classic INSERT SQL query is done in the
table pointed by the "table" variable.
.TP 0.2i
\(bu
start with "INSERT ": Configuration has to specify
the start of the INSERT query that will be used. For
example, a typical value is "INSERT INTO ulog2".
.TP 0.2i
\(bu
start with "CALL": the named stored procedure is
executed with the "CALL" MySQL command.
.TP 0.2i
\(bu
Otherwise the named stored function is executed with
the "SELECT" MySQL command.
.RE
.TP 
db
Name of the mysql database.
.TP 
host
Name of the mysql database host.
.TP 
host
TCP port number of mysql database server.
.TP 
user
Name of the mysql user.
.TP 
pass
Password for mysql.
.TP 
reconnect
Number of reconnection attempt before declaring the output
plugin as dead.
.TP 
connect_timeout
Database connection timeout.
.RE
.TP 
ulogd_output_PGSQL.so
An output plugin for logging into a postgresql database. This is
only compiled if you have the pgsql libraries installed, and the
configure script was able to detect them. (that is: --with-pgsql
was specified for ./configure)

The plugin automagically runs a procedure with arguments taken
from a the configurable table; It connects to pgsql during the
startup phase of ulogd and obtains a list of the columns in the
table. Then it tries to resolve the column names against keys of
interpreter plugins. This way you can easily build your own
procedure and select it arguments just by modifying the layout of
the table.

If, for example, your table contains a field called 'ip_saddr',
ulogd will resolve this against the key 'ip.saddr' and put the ip
address as 32bit unsigned integer into the table.

The file '\fIdoc/pgsql-ulogd2.sql\fR' contains a
schema for both packet and flow logging.

The module defines the following configuration directives:
.RS 
.TP 
table
Name of the table which ulogd will use to build arguments
list.
.TP 
procedure
Stored procedure that will be run with the argument
specified in the table variable.
.TP 
schema
PGSQL schema to use.
.TP 
db
Name of the database.
.TP 
host
Name of the pgsql database host.
.TP 
port
TCP port number of database server.
.TP 
user
Name of the sql user.
.TP 
pass
Password for sql user.
.TP 
reconnect
Number of reconnection attempt before declaring the output
plugin as dead.
.TP 
connect_timeout
Database connection timeout.
.RE
.TP 
ulogd_output_SQLITE3.so
An output plugin for logging into a SQLITE v3 database. This is
only compiled if you have the sqlite libraries installed, and the
configure script was able to detect them. (that is: --with-sqlite3
was specified for ./configure)

The plugin automagically inserts the data into the configured
table; It opens the sqlite db during the startup phase of ulogd
and obtains a list of the columns in the table. Then it tries to
resolve the column names against keys of interpreter plugins. This
way you can easily select which information you want to log - just
by the layout of the table.

If, for example, your table contains a field called 'ip_saddr',
ulogd will resolve this against the key 'ip.saddr' and put the ip
address as 32bit unsigned integer into the table.

You may want to have a look at the file
\&'\fIdoc/sqlite3.table\fR' as an example table
including fields to log all keys from ulogd_BASE.so. Just delete
the fields you are not interested in, and create the table. This
file contains two tables, one for packet-based logging and another
for flow-based logging.

To create the database file with the tables, you have to invoke
the following command: \fIsqlite3 ulogd.sqlite3db <
sqlite3.table\fR

To check that we are logging stuff into it correctly: sqlite3
ulogd.sqlite3db "SELECT * from ulog_ct"

The module defines the following configuration directives:
.RS 
.TP 
table
Name of the table to which ulogd should log.
.TP 
db
Name of the database.
.RE
.TP 
ulogd_output_SYSLOG.so
An output plugin that really logs via syslogd. Lines will look
exactly like printed with traditional LOG target.

The module defines the following configuration directives:
.RS 
.TP 
facility
The syslog facility (LOG_DAEMON, LOG_KERN, LOG_LOCAL0
\&.. LOG_LOCAL7, LOG_USER)
.TP 
level
The syslog level (LOG_EMERG, LOG_ALERT, LOG_CRIT, LOG_ERR,
LOG_WARNING, LOG_NOTICE, LOG_INFO, LOG_DEBUG)
.RE
.SH "QUESTIONS / COMMENTS"
All comments / questions / ... are appreciated.
Just drop a note to netfilter-devel@vger.kernel.org.
.PP
The preferred method for reporting bugs is the netfilter bugzilla system,
available at \(lahttp://bugzilla.netfilter.org/\(ra
.SH "SEE ALSO"
iptables(8), ip6tables(8), nft(8)
.SH AUTHORS
ulogd was written by Harald Welte.
.SH COPYRIGHT
Copyright \(co 2000-2006 Harald Welte
<\*(T<laforge@netfilter.org\*(T>>
.br
Copyright \(co 2008-2012 Pablo Neira Ayuso
<\*(T<pablo@netfilter.org\*(T>>
.br
Copyright \(co 2008-2012 Eric Leblond
<\*(T<eric@regit.org\*(T>>
.PP
ulogd is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License version 2 as published by the Free
Software Foundation.
.PP
This documentation is licenced under the terms of the Creative Commons
Attribution-ShareAlike 4.0 license, 
.URL http://creativecommons.org/licenses/by-sa/4.0/ "CC BY-SA 4.0"
\&.
